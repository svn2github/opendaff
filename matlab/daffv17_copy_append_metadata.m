function [] = daffv17_copy_append_metadata( daff_input_file_path, daff_output_file_path, additional_metadata )
% Reads a DAFF file, appends new metadata and exports the DAFF file again
%
% Will overwrite an existing key with new metadata entry.
%
% daff_input_file_path  Input file path 
% daff_output_file_path Output file path
% additional_metadata   Extend metadata of target file
%  
%
    h = DAFFv17( 'open', daff_input_file_path );
    props = DAFFv17( 'getProperties', h );    
    md_old = DAFFv17( 'getMetadata', h );    
   
    metadata_v17 = [];
    
    for j = 1:numel( additional_metadata )
        
        % key also present in new metadata, use new.
        switch additional_metadata( j ).datatype
        case 0
            md_type = 'BOOL';
        case 1
            md_type = 'INT';
        case 2
            md_type = 'FLOAT';
        otherwise
            md_type = 'STRING';
        end
        metadata_v17 = daffv17_add_metadata( metadata_v17, additional_metadata( j ).name, md_type, additional_metadata( j ).value );
        
    end
    
    for i = 1:numel( md_old )
        present = false;
        for j = 1:numel( metadata_v17 )
            if strcmpi( md_old( i ).name, metadata_v17( j ).name )
                present = true;
            end
        end
        
        if ~present
            
                switch md_old( i ).datatype
                case 0
                md_type = 'BOOL';
                case 1
                md_type = 'INT';
                case 2
                md_type = 'FLOAT';
                otherwise
                md_type = 'STRING';
                end
                metadata_v17 = daffv17_add_metadata( metadata_v17, md_old( i ).name, md_type, md_old( i ).value );
        end
    end
    
    switch( props.contentType )
    case { 'ms', 'mps', 'ps' }
	daffv17_write( 'filename', daff_output_file_path, ...                
                'metadata', metadata_v17, ...
                'datafunc', @dfCopyMS, ...
                'userdata', h, ...
                'content', props.contentType, ...
                'quantization', props.quantization, ...
                'channels', props.numChannels, ...
                'alphares', props.alphaResolution, ...
                'alpharange', props.alphaRange, ...
                'betares', props.betaResolution, ...
                'betarange', props.betaRange, ...
                'orient', props.orientation );
        case 'ir'
    daffv17_write( 'filename', daff_output_file_path, ...                
                'metadata', metadata_v17, ...
                'datafunc', @dfCopyIR, ...
                'userdata', h, ...
                'content', props.contentType, ...
                'quantization', props.quantization, ...
                'channels', props.numChannels, ...
                'alphares', props.alphaResolution, ...
                'alpharange', props.alphaRange, ...
                'betares', props.betaResolution, ...
                'betarange', props.betaRange, ...
                'orient', props.orientation );
        case 'dft'
    daffv17_write( 'filename', daff_output_file_path, ...                
                'metadata', metadata_v17, ...
                'datafunc', @dfCopyDFT, ...
                'userdata', h, ...
                'content', props.contentType, ...
                'quantization', props.quantization, ...
                'channels', props.numChannels, ...
                'alphares', props.alphaResolution, ...
                'alpharange', props.alphaRange, ...
                'betares', props.betaResolution, ...
                'betarange', props.betaRange, ...
                'orient', props.orientation );
    end
    
    DAFFv17( 'close', h );
end